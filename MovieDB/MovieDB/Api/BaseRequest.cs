using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Reflection;

namespace MovieDB.Api
{
    public abstract class BaseRequest
    {
        /// <summary>
        /// Constructor
        /// Instantiates the Parameters property
        /// </summary>
        public BaseRequest()
        {
            this.Parameters = new Dictionary<string, object>();
        }

        /// <summary>
        /// A key generated by each source to allow access to their Api.
        /// Overriden in each source Request class. (i.e. TMDB and TVMaze have their own request classes)
        /// </summary>
        public abstract string ApiKey { get; }

        /// <summary>
        /// The base uri for the Api endpoint. (i.e. https://google.com)
        /// Overriden in each source Request class.
        /// </summary>
        public abstract string BaseUri { get; }

        /// <summary>
        /// Not all of the Apis we're using require a key
        /// Overriden in each source Request class.
        /// </summary>
        public abstract bool RequireApiKey { get; }

        /// <summary>
        /// This is the specific endpoint to hit
        /// Typically overriden in specific request classes (i.e. MovieDB.TMDB.MovieRequest)
        /// </summary>
        public virtual string BaseEndpoint { get; set; }

        /// <summary>
        /// Holds the parameters for the Api call / endpoint
        /// </summary>
        public virtual Dictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Builds the endpoint by appending parameters
        /// </summary>
        /// <returns></returns>
        public string GetEndpoint()
        {
            if (this.Parameters.Any())
            {
                string separator = "&";
                if (this.BaseEndpoint.EndsWith("?"))
                {
                    separator = "";
                }

                for (int i = 0; i < this.Parameters.Count; i++)
                {
                    KeyValuePair<string, object> param = this.Parameters.ElementAt(i);
                    this.BaseEndpoint += $"{separator}{param.Key}={param.Value}";

                    if (i == 0)
                    {
                        separator = "&";
                    }
                }
            }

            return this.BaseEndpoint;
        }

        /// <summary>
        /// Adds all specific request parameters to our list of paramters
        /// Typically gets called in the main Api.cs class right before we send our request
        /// </summary>
        public void BuildRequestParameters()
        {
            foreach (PropertyInfo prop in this.GetType().GetProperties())
            {
                var paramterAttribute = prop.CustomAttributes.Where(x => x.AttributeType == typeof(ParameterNameAttribute)).FirstOrDefault();
                if (paramterAttribute != null)
                {
                    var paramterName = paramterAttribute.ConstructorArguments.First().Value.ToSafeString();

                    var paramterValue = prop.GetValue(this, null);
                    if (paramterValue != null)
                    {
                        this.AddParameter(paramterName, paramterValue);
                    }
                }
            }
        }

        /// <summary>
        /// Adds to our list of parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public void AddParameter(string name, object value)
        {
            if (!name.HasValue()) { return; }

            if (this.Parameters.ContainsKey(name))
            {
                this.Parameters[name] = value;
            }
            else
            {
                this.Parameters.Add(name, value);
            }
        }
    }
}
